{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","onChange","map","row","grid","score","status","prevState","JSON","stringify","_slideAndMerge","_postMoveHandler","_slideRight","_mergeRight","filtered","filter","cell","merged","Array","fill","emptyIndex","i","length","slice","_transposeGrid","reverse","_addRandomCell","skipNext","push","_","colIndex","emptyCells","col","randomIndex","Math","floor","random","_checkWin","_hasAvailableMoves","some","r","c","module","exports","require","game","newGrid","renderGrid","startButton","document","querySelector","scoreElement","messageStart","messageWin","messageLose","fieldCells","querySelectorAll","tileLayer","innerHTML","KEY_LEFT","KEY_RIGHT","KEY_UP","KEY_DOWN","previousGrid","parse","getState","currentGrid","gameField","forEach","textContent","className","moves","prevValue","currentValue","fromCoords","toCoords","findCoordinates","from","to","value","isMerge","move","fromCell","toCell","tempTile","createElement","style","transform","offsetLeft","offsetTop","transition","duration","left","top","width","offsetWidth","height","offsetHeight","appendChild","addEventListener","remove","once","setTimeout","body","contains","index","classList","add","getScore","handleKeyPress","event","getStatus","key","moveLeft","moveRight","moveUp","moveDown","checkGameStatus","start","restart","tile"],"mappings":"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","file":"main.378008c8.js","sourceRoot":"..\\src","sourcesContent":["\"use strict\";\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.onChange = null;\n    this.initialState = initialState.map((row) => [...row]);\n    this.grid = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = \"idle\";\n  }\n\n  moveLeft() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.grid);\n\n    this.grid = this.grid.map((row) => this._slideAndMerge(row));\n    this._postMoveHandler(prevState);\n  }\n\n  moveRight() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.grid);\n\n    this.grid = this.grid.map((row) => this._slideRight(row));\n\n    this.grid = this.grid.map((row) => this._mergeRight(row));\n\n    this._postMoveHandler(prevState);\n  }\n\n  _slideRight(row) {\n    const filtered = row.filter((cell) => cell !== 0);\n    const merged = new Array(4).fill(0);\n\n    let emptyIndex = 3;\n\n    for (let i = filtered.length - 1; i >= 0; i--) {\n      merged[emptyIndex--] = filtered[i];\n    }\n\n    return merged;\n  }\n\n  _mergeRight(row) {\n    const merged = row.slice();\n\n    for (let i = 3; i > 0; i--) {\n      if (merged[i] === merged[i - 1] && merged[i] !== 0) {\n        merged[i] *= 2;\n        this.score += merged[i];\n        merged[i - 1] = 0;\n      }\n    }\n\n    return this._slideRight(merged);\n  }\n\n  moveUp() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.grid);\n\n    this._transposeGrid();\n    this.grid = this.grid.map((row) => this._slideAndMerge(row));\n    this._transposeGrid();\n    this._postMoveHandler(prevState);\n  }\n\n  moveDown() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.grid);\n\n    this._transposeGrid();\n\n    this.grid = this.grid.map(\n      (row) => this._slideAndMerge(row.reverse()).reverse(),\n      // eslint-disable-next-line function-paren-newline\n    );\n    this._transposeGrid();\n    this._postMoveHandler(prevState);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.grid;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status !== \"idle\") {\n      return;\n    }\n\n    this.status = \"playing\";\n    this._addRandomCell();\n    this._addRandomCell();\n  }\n\n  restart() {\n    this.score = 0;\n    this.grid = this.initialState.map((row) => [...row]);\n    this.status = \"idle\";\n  }\n\n  _slideAndMerge(row) {\n    const filtered = row.filter((cell) => cell !== 0);\n    const merged = [];\n\n    let skipNext = false;\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (skipNext) {\n        skipNext = false;\n        continue;\n      }\n\n      if (filtered[i] === filtered[i + 1]) {\n        merged.push(filtered[i] * 2);\n        this.score += filtered[i] * 2;\n        skipNext = true;\n      } else {\n        merged.push(filtered[i]);\n      }\n    }\n\n    while (merged.length < 4) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  _transposeGrid() {\n    this.grid = this.grid[0].map(\n      (_, colIndex) => this.grid.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  _addRandomCell() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.grid.length; row++) {\n      for (let col = 0; col < this.grid[row].length; col++) {\n        if (this.grid[row][col] === 0) {\n          emptyCells.push({\n            row,\n            col,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.grid[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  _postMoveHandler(prevState) {\n    if (JSON.stringify(this.grid) !== prevState) {\n      this._addRandomCell();\n\n      if (this.onChange) {\n        this.onChange(this.grid); // обновление UI\n      }\n\n      if (this._checkWin()) {\n        this.status = \"win\";\n      } else if (!this._hasAvailableMoves()) {\n        this.status = \"lose\";\n      }\n    }\n  }\n\n  _checkWin() {\n    return this.grid.some((row) => row.some((cell) => cell === 2048));\n  }\n\n  _hasAvailableMoves() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.grid[r][c] === 0) {\n          return true;\n        }\n\n        if (c < 3 && this.grid[r][c] === this.grid[r][c + 1]) {\n          return true;\n        }\n\n        if (r < 3 && this.grid[r][c] === this.grid[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","\"use strict\";\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\n// Write your code here\nconst Game = require(\"../modules/Game.class\");\n\n// Write your code here\nconst game = new Game();\n\ngame.onChange = (newGrid) => {\n  renderGrid(newGrid); // функция, которая отрисует изменения с анимацией\n};\n\nconst startButton = document.querySelector(\".button\");\nconst scoreElement = document.querySelector(\".game-score\");\nconst messageStart = document.querySelector(\".message-start\");\nconst messageWin = document.querySelector(\".message-win\");\nconst messageLose = document.querySelector(\".message-lose\");\nconst fieldCells = document.querySelectorAll(\".field-cell\");\nconst tileLayer = document.querySelector(\".tile-layer\");\n\ntileLayer.innerHTML = \"\";\n\n// Змінні для клавіш\nconst KEY_LEFT = \"ArrowLeft\";\nconst KEY_RIGHT = \"ArrowRight\";\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\n\nlet previousGrid = JSON.parse(JSON.stringify(game.getState()));\n\nfunction renderGrid() {\n  const currentGrid = game.getState();\n  const gameField = document.querySelector(\".game-field\");\n  const duration = 250; // Тривалість анімації в мс\n\n  // 1. Очищаємо основну сітку від попередніх значень\n  fieldCells.forEach((cell) => {\n    cell.textContent = \"\";\n    cell.className = \"field-cell\";\n  });\n\n  // 2. Збираємо інформацію про всі рухи та об'єднання\n  const moves = [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const prevValue = previousGrid[row][col];\n      const currentValue = currentGrid[row][col];\n\n      if (prevValue === 0) {\n        continue;\n      } // Немає плитки, яка б рухалася\n\n      if (currentValue === prevValue) {\n        // Плитка не змінилась, але можливо перемістилась\n        const fromCoords = { row, col };\n        const toCoords = findCoordinates(currentGrid, prevValue);\n\n        if (\n          toCoords &&\n          (fromCoords.row !== toCoords.row || fromCoords.col !== toCoords.col)\n        ) {\n          moves.push({\n            from: fromCoords,\n            to: toCoords,\n            value: prevValue,\n          });\n        }\n      } else if (currentValue > prevValue) {\n        // Плитка об'єдналася\n        const fromCoords = { row, col };\n        const toCoords = findCoordinates(currentGrid, currentValue);\n\n        if (toCoords) {\n          moves.push({\n            from: fromCoords,\n            to: toCoords,\n            value: prevValue,\n            isMerge: true,\n          });\n        }\n      }\n    }\n  }\n\n  // 3. Створюємо та анімуємо тимчасові плитки\n  moves.forEach((move) => {\n    const fromCell = fieldCells[move.from.row * 4 + move.from.col];\n    const toCell = fieldCells[move.to.row * 4 + move.to.col];\n\n    const tempTile = document.createElement(\"div\");\n\n    tempTile.textContent = move.value;\n    tempTile.className = `field-cell field-cell--${move.value} tile-moving`;\n    tempTile.style.transform = `translate(${fromCell.offsetLeft}px, ${fromCell.offsetTop}px)`;\n    tempTile.style.transition = `transform ${duration}ms ease-in-out`;\n\n    // Встановлюємо розмір та позицію, щоб вони збігалися з клітинкою\n    tempTile.style.left = \"0\";\n    tempTile.style.top = \"0\";\n    tempTile.style.width = fromCell.offsetWidth + \"px\";\n    tempTile.style.height = fromCell.offsetHeight + \"px\";\n\n    gameField.appendChild(tempTile);\n\n    // Примусовий reflow для початку анімації\n    void tempTile.offsetWidth;\n\n    // Запускаємо анімацію\n    tempTile.style.transform = `translate(${toCell.offsetLeft}px, ${toCell.offsetTop}px)`;\n\n    // Видаляємо тимчасову плитку після завершення анімації\n    tempTile.addEventListener(\"transitionend\", () => tempTile.remove(), {\n      once: true,\n    });\n\n    setTimeout(() => {\n      if (document.body.contains(tempTile)) {\n        tempTile.remove();\n      }\n    }, duration + 50);\n  });\n\n  // 4. Оновлюємо основну сітку після завершення анімації\n  setTimeout(() => {\n    fieldCells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = currentGrid[row][col];\n      const prevValue = previousGrid[row][col];\n\n      cell.textContent = value === 0 ? \"\" : value;\n      cell.className = `field-cell ${value ? `field-cell--${value}` : \"\"}`;\n\n      // Анімація появи\n      if (prevValue === 0 && value !== 0) {\n        cell.classList.add(\"field-cell--new\");\n      }\n\n      // Анімація об'єднання\n      if (prevValue !== 0 && value > prevValue) {\n        cell.classList.add(\"field-cell--merged\");\n      }\n    });\n\n    previousGrid = JSON.parse(JSON.stringify(currentGrid));\n    scoreElement.textContent = game.getScore();\n  }, duration);\n}\n\n// Допоміжна функція для пошуку координат плитки\nfunction findCoordinates(grid, value) {\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (grid[row][col] === value) {\n        return { row, col };\n      }\n    }\n  }\n\n  return null;\n}\n\n// eslint-disable-next-line no-shadow\nfunction handleKeyPress(event) {\n  if (game.getStatus() !== \"playing\") {\n    return;\n  }\n\n  // Використання змінних для перевірки натиснутих клавіш\n  switch (event.key) {\n    case KEY_LEFT:\n      game.moveLeft();\n      break;\n    case KEY_RIGHT:\n      game.moveRight();\n      break;\n    case KEY_UP:\n      game.moveUp();\n      break;\n    case KEY_DOWN:\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  renderGrid();\n  checkGameStatus();\n}\n\nfunction checkGameStatus() {\n  if (game.getStatus() === \"win\") {\n    messageWin.classList.remove(\"hidden\");\n  } else if (game.getStatus() === \"lose\") {\n    messageLose.classList.remove(\"hidden\");\n  }\n}\n\nstartButton.addEventListener(\"click\", () => {\n  if (startButton.classList.contains(\"start\")) {\n    game.start();\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    startButton.textContent = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n  } else {\n    game.restart();\n    startButton.classList.remove(\"restart\");\n    startButton.classList.add(\"start\");\n    startButton.textContent = \"Start\";\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    messageStart.classList.remove(\"hidden\");\n    document.querySelectorAll(\".tile-moving\").forEach((tile) => tile.remove());\n  }\n  renderGrid();\n});\n\ndocument.addEventListener(\"keydown\", handleKeyPress);\n"]}